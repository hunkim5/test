# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
# SMART_PORT_WEBHOOK
name: QA-CI-ACTION
run-name: Build to ap-eosh (qa / ${{ github.ref_name }}) by @${{ github.actor }}

env:
    PRJ_NAME: ap-eosh
    ENV_PRJ_NAME: qa-ap-eosh
    # Default dev values
    AWS_REGION: ap-northeast-2
    ECR_REPOSITORY: "999182299633.dkr.ecr.ap-northeast-2.amazonaws.com/"
    TAGS_NAME: latest
    DOCKER_FILE: dist/k8s.Dockerfile
    DEPLOY_EVENT_TYPE: ap-eosh-deploy
on:
    push:
        tags:
            - qa-releases/**
    release:
        types: [created]
    workflow_dispatch:

permissions:
    contents: read
    id-token: write

jobs:
    build:
        runs-on: arc-runners

        steps:
            - name: Retrieve secret from Vault
              id: get_secret
              uses: hashicorp/vault-action@v3
              with:
                  method: jwt
                  url: https://vault.dev.infra-aws.com
                  role: github-action
                  secrets: |
                      it-developer/data/secret-id/240906 secret_id | SECRET_ID ;

            - name: Checkout
              uses: actions/checkout@v4


            - name: Install aws cli
              id: install-aws-cli
              uses: unfor19/install-aws-cli-action@v1

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1-node16
              with:
                  aws-access-key-id: ${{ secrets.AIR_AWS_ACCESS_KEY_ID_DEV }}
                  aws-secret-access-key: ${{ secrets.AIR_AWS_SECRET_ACCESS_KEY_DEV }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Check if ECR repository exists
              run: |
                  set +e
                  aws ecr describe-repositories --repository-names ${{ env.ENV_PRJ_NAME }} > /dev/null 2>&1
                  if [ $? -eq 0 ]; then
                    echo "ECR repository '${{ env.ENV_PRJ_NAME }}' already exists. Skipping creation."
                  else
                    echo "Creating ECR repository '${{ env.ENV_PRJ_NAME }}'..."
                    aws ecr create-repository --repository-name ${{ env.ENV_PRJ_NAME }}
                  fi
                  set -e

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with:
                  mask-password: "true"

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v2
              with:
                  driver: docker

            - name: Build and push for image
              uses: docker/build-push-action@v5
              id: build-image
              with:
                  context: .
                  push: true
                  file: ${{ env.DOCKER_FILE }}
                  tags: ${{ env.ECR_REPOSITORY }}${{ env.ENV_PRJ_NAME }}:${{ env.TAGS_NAME }}
                  build-args: |
                      SECRET_ID=${{ steps.get_secret.outputs.SECRET_ID }}

            - name: Set CUSTOM_STATUS Env Variable
              if: always()
              run: |
                  if [ "${{ steps.build-image.outcome }}" = "failure" ]
                  then
                    CUSTOM_STATUS="‚ùå Ïã§Ìå®"
                  elif [ "${{ steps.build-image.outcome }}" = "cancelled" ]
                  then
                    CUSTOM_STATUS="‚ö†Ô∏è Ï∑®ÏÜå"
                  else
                    CUSTOM_STATUS="‚úÖ ÏÑ±Í≥µ"
                  fi

                  echo "CUSTOM_STATUS=${CUSTOM_STATUS}" >> $GITHUB_ENV

            - name: slack-send
              if: always()
              uses: slackapi/slack-github-action@v1.19.0
              with:
                  payload: |
                      {
                        "custom_status": "${{ env.CUSTOM_STATUS }}",
                        "workflow": "${{ github.workflow }}",
                        "job_deploy_dev": "${{ github.repository }}",
                        "status_deploy_dev": "${{ steps.build-image.outcome }}",
                        "actor": "${{ github.actor }}",
                        "ref_name": "${{ github.ref_name }}"
                      }
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SMART_PORT_WEBHOOK }}
                  ACTION_RUN_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            - name: Smart Port Slack Send
              if: always()
              uses: slackapi/slack-github-action@v1.27.0
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SMART_PORT_SLACK_WEBHOOK }}
                  SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
              with:
                  payload: |
                      {
                        "text": "üöÄ *${{ github.event.head_commit.message }}*",
                        "attachments": [
                            {
                                "mrkdwn_in": [ "text" ],
                                "color": "${{ env.COLOR }}",
                                "fields": [{"title": "üéÅ Repository",
                                        "value": "${{ github.repository }}",
                                        "short": true
                                    },
                                    {
                                        "title": "Ref",
                                        "value": "${{ github.ref }}",
                                        "short": true
                                    },
                                    {
                                        "title": "Env",
                                        "value": "QA",
                                        "short": true
                              },
                                    {
                                        "title": "Status",
                                        "value": "${{ env.CUSTOM_STATUS }}",
                                        "short": true
                                    }
                                ]
                            }
                          ]
                      }

    deploy-trigger:
        runs-on: arc-runners
        needs: build
        permissions:
            id-token: write
            contents: read
            actions: read

        steps:
            - name: send deploy trigger (QA)
              uses: peter-evans/repository-dispatch@v3
              with:
                  token: ${{ secrets.ORG_GITHUB_TOKEN }}
                  repository: airpremia/airpremia-charts
                  event-type: ${{ env.DEPLOY_EVENT_TYPE }}
                  client-payload: '{"repository": "${{ github.repository }}", "module": "${{ env.PRJ_NAME }}", "phase": "qa", "actor": "${{ github.actor }}"}'
